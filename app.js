require('dotenv').config();
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');
const nodemailer = require('nodemailer');
const TelegramBot = require('node-telegram-bot-api');

const { validateHandler } = require('./middleware/validate');
const { newsData, relatedNews } = require('./mokki/data');
const { reviewsData } = require('./mokki/mokki-reviews');

const app = express();
const rateLimit = require('express-rate-limit');
const PORT = 5500;

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(__dirname));

app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

const TELEGRAM_BOT_TOKEN = '8161506152:AAEyLE3R8IdcSDMvYmdxjtP_IgtqI8kQAMo';
const TELEGRAM_CHAT_ID = '768659338';

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ'
});

const transporter = nodemailer.createTransport({
  service: 'mail.ru',
  auth: {
    user: 'babic34@mail.ru',
    pass: 'KdHAMKwavmJ9jfg3v0z4'
  }
})

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/news/:id', (req, res) => {
  const newsItem = newsData.find(item => item.id === parseInt(req.params.id));
  if (newsItem) {
    res.render('news-detail', { newsItem, relatedNews });
  } else {
    res.status(404).send('News item not found');
  }
})

app.get('/news', (req, res) => {
  res.render('news', { newsData });
});

app.get('/reviews', (req, res) => {
  res.render('reviews', { reviewsData });
})

app.get('/reviews/:id', (req, res) => {
  const reviewItem = reviewsData.find(item => item.id === parseInt(req.params.id));
  if (reviewItem) {
    res.render('reviews-detail', { reviewItem });
  } else {
    res.status(404).send('Review item not found');
  }
})
app.get('/promotion', (req, res) => {
  res.render('promotion');
})
app.post('/api/callback', validateHandler, limiter, async (req, res) => {
  try {
    const { name, phone, agreement, newsletter } = req.body;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –û–ø–µ–∫–∞*
üë§ *–ò–º—è:* ${name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
üìù *–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:* ${agreement ? '–î–∞' : '–ù–µ—Ç'}
üì® *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:* ${newsletter ? '–î–∞' : '–ù–µ—Ç'}
üïí *–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:* ${new Date().toLocaleString('ru-RU')}
`;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∫–∞–∫ —Ä–∞–Ω—å—à–µ
      const mailOptions = {
        from: 'babic34@mail.ru',
        to: 'vlad.stavros@bk.ru',
        subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –û–ø–µ–∫–∞',
        html: `
        <h2>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h2>
        <p><strong>–ò–º—è:</strong> ${name}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
        <p><strong>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:</strong> ${agreement ? '–î–∞' : '–ù–µ—Ç'}</p>
        <p><strong>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</strong> ${newsletter ? '–î–∞' : '–ù–µ—Ç'}</p>
        <p><strong>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</strong> ${new Date().toLocaleString('ru-RU')}</p>
      `
      };
      
      await transporter.sendMail(mailOptions);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
      await bot.sendMessage(TELEGRAM_CHAT_ID, telegramMessage, { parse_mode: 'Markdown' });
      
      res.status(201).json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      res.status(201).json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});
